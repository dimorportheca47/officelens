{"version":3,"sources":["graphql/queries.js","components/Floormap.js","graphql/subscriptions.js"],"names":["queryDeviceInfoTables","CheckLatLng","useMapEvents","click","e","SetMarker","Markers","context","useContext","MainContext","PosContext","position","setPosition","partition","office","floor","useEffect","a","API","graphql","query","queries","variables","PartitionKey","limit","DeviceData","DeviceSrc","data","items","records","map","v","sensor","filter","console","log","pos","push","Marker","icon","blackIcon","redIcon","Popup","Subscription","subscribe","graphqlOperation","next","eventData","newitem","value","onLambdaDeviceInfoTable","prevPosition","obj","SortKey","unsubscribe","SetBounds","bounds","ratio","url","useMap","img","Image","onload","naturalWidth","naturalHeight","addLayer","Leaflet","imageOverlay","src","Icon","Default","imagePath","Floormap","setContext","title","subtitle","spacing","fontSize","style","color","variant","actionGroup","options","selectedOption","onChange","event","prevctx","target","id","MapContainer","zoom","center","scrollWheelZoom","crs","CRS","Simple","maxZoom"],"mappings":"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","file":"static/js/6.782cf85f.chunk.js","sourcesContent":["/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const queryDeviceInfoTables = /* GraphQL */ `\n  query QueryDeviceInfoTables(\n    $PartitionKey: String!\n    $filter: TableDeviceInfoTableFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    queryDeviceInfoTables(\n      PartitionKey: $PartitionKey\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        Alias\n        IsConnected\n        IsOccupied\n        PartitionKey\n        SensorID\n        SortKey\n      }\n      nextToken\n    }\n  }\n`;\n","import { API, graphqlOperation } from 'aws-amplify';\nimport * as queries from '../graphql/queries';\nimport { onLambdaDeviceInfoTable } from '../graphql/subscriptions';\nimport Select from 'aws-northstar/components/Select';\nimport Container from 'aws-northstar/layouts/Container';\nimport { useEffect, useContext } from 'react';\nimport { MainContext, PosContext } from './Context';\nimport { redIcon, blackIcon, sensor, floor } from '../data';\nimport 'leaflet/dist/leaflet.css';\nimport { MapContainer, useMapEvents, Marker, Popup, useMap } from 'react-leaflet';\nimport Text from 'aws-northstar/components/Text';\nimport Inline from 'aws-northstar/layouts/Inline';\nimport RoomIcon from '@material-ui/icons/Room';\nimport Leaflet, { CRS } from 'leaflet';\nLeaflet.Icon.Default.imagePath = '//cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/';\n\nfunction CheckLatLng() {\n  useMapEvents({\n    click: (e) => {\n      //console.log(e.latlng.lat + \",\" + e.latlng.lng);\n    },\n  });\n  return [<div key=\"CheckLatLng\" />];\n}\n\nfunction SetMarker() {\n  var Markers = [];\n  const context = useContext(MainContext)[0];\n  const [position, setPosition] = useContext(PosContext);\n  const partition = context.office + '_' + context.floor;\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const DeviceData = await API.graphql({\n          query: queries.queryDeviceInfoTables,\n          variables: {\n            PartitionKey: partition,\n            limit: 100,\n          },\n        });\n        const DeviceSrc = DeviceData.data.queryDeviceInfoTables.items;\n\n        const records = DeviceSrc.map(function (v) {\n          if (v['SortKey'] in sensor) {\n            v['pos'] = sensor[v['SortKey']];\n            return v;\n          } else {\n            return null;\n          }\n        }).filter((v) => v !== null);\n        setPosition(records);\n      } catch (err) {\n        console.log('error');\n      }\n    })();\n  }, [setPosition, context, partition]);\n\n  for (var pos of position) {\n    if (typeof pos['PartitionKey'] === 'undefined') {\n      continue;\n    }\n    if (!pos['IsConnected']) {\n      Markers.push(\n        <div key={pos['SortKey']}>\n          <Marker position={pos['pos']} icon={redIcon}>\n            <Popup>Disconnected</Popup>\n          </Marker>\n        </div>\n      );\n    } else if (pos['IsOccupied']) {\n      Markers.push(\n        <div key={pos['SortKey']}>\n          <Marker position={pos['pos']} icon={blackIcon} />\n        </div>\n      );\n    }\n  }\n  return Markers;\n}\n\nfunction Subscription() {\n  const setPosition = useContext(PosContext)[1];\n  const context = useContext(MainContext)[0];\n  const partition = context.office + '_' + context.floor;\n\n  useEffect(() => {\n    const subscribe = API.graphql(graphqlOperation(onLambdaDeviceInfoTable)).subscribe({\n      next: (eventData) => {\n        var newitem = eventData.value.data.onLambdaDeviceInfoTable;\n        if (newitem['PartitionKey'] === partition) {\n          newitem['pos'] = sensor[newitem['SortKey']];\n          setPosition((prevPosition) =>\n            prevPosition.map((obj) => (obj.SortKey === newitem['SortKey'] ? newitem : obj))\n          );\n        }\n      },\n    });\n    return () => subscribe.unsubscribe();\n  }, [setPosition, context, partition]);\n\n  return null;\n}\n\nfunction SetBounds() {\n  const context = useContext(MainContext)[0];\n  const url = './floormap/' + context.office + '_' + context.floor + '.png';\n  const map = useMap();\n  var bounds;\n\n  const img = new Image();\n  var ratio;\n  img.onload = function () {\n    ratio = img.naturalWidth / img.naturalHeight ;\n    if (ratio > 1) {\n      bounds = [\n        [-128 / ratio, -128],\n        [128 / ratio, 128],\n      ];\n    } else {\n      bounds = [\n        [-128 / ratio, -128],\n        [128 / ratio, 128],\n      ];\n    }\n    map.addLayer(Leaflet.imageOverlay(url, bounds));\n  };\n  img.src = url;\n\n  return null;\n}\n\nconst Floormap = () => {\n  const [context, setContext] = useContext(MainContext);\n  const onChange = (event) => {\n    setContext((prevctx) => ({ ...prevctx, floor: event.target.value }));\n  };\n\n  return (\n    <Container\n      title={context.office + '_' + context.floor}\n      subtitle={\n        <Inline spacing=\"xs\">\n          <RoomIcon fontSize=\"small\" style={{ color: 'black' }} />\n          <Text variant=\"small\">Occupied</Text>\n          <RoomIcon fontSize=\"small\" style={{ color: 'red' }} />\n          <Text variant=\"small\">Disconnected</Text>\n        </Inline>\n      }\n      actionGroup={\n        <Inline spacing=\"xs\">\n          <Select options={floor[context.office]} selectedOption={{ value: context.floor }} onChange={onChange} />\n        </Inline>\n      }\n    >\n      <div id=\"wrapper\">\n        <MapContainer zoom={1} center={[0, 0]} scrollWheelZoom={true} crs={CRS.Simple} maxZoom={3}>\n          <SetBounds />\n          <Subscription />\n          <SetMarker />\n          <CheckLatLng />\n        </MapContainer>\n      </div>\n    </Container>\n  );\n};\n\nexport default Floormap;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onLambdaDeviceInfoTable = /* GraphQL */ `\n  subscription OnLambdaDeviceInfoTable {\n    onLambdaDeviceInfoTable {\n      Alias\n      IsConnected\n      IsOccupied\n      PartitionKey\n      SensorID\n      SortKey\n    }\n  }\n`;\n"],"sourceRoot":""}