{"version":3,"sources":["graphql/queries.js","components/Portfolio.js"],"names":["queryDeviceInfoTables","columnDefinitions","id","width","Header","accessor","Cell","row","original","IsConnected","statusType","IsOccupied","CalCongestion","data","SeatsNum","length","filter","x","NotConnected","congestion","container","spacing","item","xs","headingVariant","title","value","text","strokeWidth","label","Portofolio","useState","setData","context","useContext","MainContext","partition","office","floor","useEffect","a","API","graphql","query","queries","variables","PartitionKey","limit","DeviceData","DeviceSrc","items","console","log","onSelectionChange","tableTitle"],"mappings":"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","file":"static/js/7.0a1b2a48.chunk.js","sourcesContent":["/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const queryDeviceInfoTables = /* GraphQL */ `\n  query QueryDeviceInfoTables(\n    $PartitionKey: String!\n    $filter: TableDeviceInfoTableFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    queryDeviceInfoTables(\n      PartitionKey: $PartitionKey\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        Alias\n        IsConnected\n        IsOccupied\n        PartitionKey\n        SensorID\n        SortKey\n      }\n      nextToken\n    }\n  }\n`;\n","import { useState, useEffect, useContext } from 'react';\nimport Container from 'aws-northstar/layouts/Container';\nimport { API } from 'aws-amplify';\nimport { MainContext } from './Context';\nimport KeyValuePair from 'aws-northstar/components/KeyValuePair';\nimport ColumnLayout, { Column } from 'aws-northstar/layouts/ColumnLayout';\nimport Stack from 'aws-northstar/layouts/Stack';\n\nimport Grid from 'aws-northstar/layouts/Grid';\nimport Table from 'aws-northstar/components/Table';\nimport StatusIndicator from 'aws-northstar/components/StatusIndicator';\nimport * as queries from '../graphql/queries';\n\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\n\nconst columnDefinitions = [\n  {\n    id: 'PartitionKey',\n    width: 150,\n    Header: 'PartitionKey',\n    accessor: 'PartitionKey',\n  },\n  {\n    id: 'SortKey',\n    width: 150,\n    Header: 'SortKey',\n    accessor: 'SortKey',\n  },\n  {\n    id: 'Alias',\n    width: 150,\n    Header: 'Alias',\n    accessor: 'Alias',\n  },\n  {\n    id: 'IsConnected',\n    width: 150,\n    Header: 'IsConnected',\n    accessor: 'IsConnected',\n    Cell: ({ row }) => {\n      if (row && row.original) {\n        const status = row.original.IsConnected;\n        switch (status) {\n          case true:\n            return <StatusIndicator statusType=\"positive\">True</StatusIndicator>;\n          case false:\n            return <StatusIndicator statusType=\"negative\">False</StatusIndicator>;\n          default:\n            return null;\n        }\n      }\n      return row.id;\n    },\n  },\n  {\n    id: 'IsOccupied',\n    width: 150,\n    Header: 'IsOccupied',\n    accessor: 'IsOccupied',\n    Cell: ({ row }) => {\n      if (row && row.original) {\n        const status = row.original.IsOccupied;\n        switch (status) {\n          case true:\n            return <StatusIndicator statusType=\"positive\">True</StatusIndicator>;\n          case false:\n            return <StatusIndicator statusType=\"negative\">False</StatusIndicator>;\n          default:\n            return null;\n        }\n      }\n      return row.id;\n    },\n  },\n  {\n    id: 'SensorID',\n    width: 200,\n    Header: 'SensorID',\n    accessor: 'SensorID',\n  },\n];\n\nfunction CalCongestion({ data }) {\n  var SeatsNum = data.length;\n  var IsOccupied = data.filter(function (x) {\n    return x.IsOccupied;\n  }).length;\n  var NotConnected = data.filter(function (x) {\n    return !x.IsConnected;\n  }).length;\n\n  var congestion = ((IsOccupied / SeatsNum) * 100) | 0;\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={4}>\n        <Container headingVariant=\"h4\" title=\"OFFICE UTILIZATION\">\n          <CircularProgressbar value={congestion} text={`${congestion}%`} strokeWidth={5} />\n        </Container>\n      </Grid>\n      <Grid item xs={4}>\n        <Container headingVariant=\"h4\" title=\"FLOOR UTILIZATION\">\n          <CircularProgressbar value={congestion} text={`${congestion}%`} strokeWidth={5} />\n        </Container>\n      </Grid>\n      <Grid item xs={4}>\n        <Container headingVariant=\"h4\" title=\"INVENTORY\">\n          <ColumnLayout>\n            <Column key=\"column1\">\n              <Stack>\n                <KeyValuePair label=\"BUILDING CAPACITY\" value={ SeatsNum }></KeyValuePair>\n                <KeyValuePair label=\"NUMBER OF FLOORS\" value={ NotConnected }></KeyValuePair>\n                <KeyValuePair label=\"NUMBER OF Disconnected Devices\" value={ NotConnected }></KeyValuePair>\n              </Stack>\n            </Column>\n          </ColumnLayout>\n        </Container>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst Portofolio = () => {\n  const [data, setData] = useState([]);\n  const context = useContext(MainContext)[0];\n  const partition = context.office + '_' + context.floor;\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const DeviceData = await API.graphql({\n          query: queries.queryDeviceInfoTables,\n          variables: {\n            PartitionKey: partition,\n            limit: 100,\n          },\n        });\n        const DeviceSrc = DeviceData.data.queryDeviceInfoTables.items;\n        setData(DeviceSrc);\n      } catch (err) {\n        console.log('error');\n      }\n    })();\n  }, [setData, context, partition]);\n\n  return (\n    <div>\n      <CalCongestion data={data} />\n      <Table\n        onSelectionChange={() => {}}\n        tableTitle=\"Device Infomation\"\n        columnDefinitions={columnDefinitions}\n        items={data}\n      ></Table>\n    </div>\n  );\n};\n\nexport default Portofolio;\n"],"sourceRoot":""}